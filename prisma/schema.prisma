// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/database/generated/prisma"
}

generator zod {
  provider   = "prisma-zod-generator"
  pureModels = true
  output     = "../src/database/generated/prisma-zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid()) @db.Uuid
  username    String
  password    String
  preferences Preference[]
  create_at   DateTime     @default(now())
  update_at   DateTime     @updatedAt

  @@map("users")
}

model Todo {
  id           String     @id @default(uuid()) @db.Uuid
  title        String
  content      String?
  is_completed Boolean    @default(false)
  deadline     DateTime?
  attachments  File[]
  tags         Tag[]
  notes        Note[]
  plans        PlanTodo[]
  priority     Priority   @relation(fields: [priority_id], references: [id])
  priority_id  String     @db.Uuid
  create_at    DateTime   @default(now())
  update_at    DateTime   @updatedAt

  @@map("todos")
}

model Priority {
  id              String   @id @default(uuid()) @db.Uuid
  weight          Int
  name            String
  highlight_color String
  todos           Todo[]
  create_at       DateTime @default(now())
  update_at       DateTime @updatedAt

  @@map("prioritys")
}

model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  todo      Todo     @relation(fields: [todo_id], references: [id])
  todo_id   String   @db.Uuid
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  @@map("tags")
}

model Note {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  todo      Todo     @relation(fields: [todo_id], references: [id])
  todo_id   String   @db.Uuid
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  @@map("notes")
}

model Plan {
  id              String     @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  repeat_type     RepeatType @default(NONE)
  repeat_interval Int        @default(1)
  repeat_days     String?
  start_date      DateTime
  end_date        DateTime?
  next_occurrence DateTime?
  plan_todos      PlanTodo[]
  create_at       DateTime   @default(now())
  update_at       DateTime   @updatedAt

  @@map("plans")
}

model PlanTodo {
  id          String   @id @default(uuid()) @db.Uuid
  plan        Plan     @relation(fields: [plan_id], references: [id])
  plan_id     String   @db.Uuid
  todo        Todo     @relation(fields: [todo_id], references: [id])
  todo_id     String   @db.Uuid
  order_index Int      @default(0)
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt

  @@unique([plan_id, todo_id])
  @@map("plan_todos")
}

model File {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  url       String
  type      String?
  size      Int
  todo      Todo     @relation(fields: [todo_id], references: [id])
  todo_id   String   @db.Uuid
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  @@map("files")
}

model Preference {
  id        String   @id @default(uuid()) @db.Uuid
  key       String
  value     String
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String   @db.Uuid
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  @@unique([user_id, key])
  @@map("preferences")
}

model Dictionary {
  id        String   @id @default(uuid()) @db.Uuid
  key       String
  code      String
  value     String
  sort      Int      @default(0)
  is_active Boolean  @default(true)
  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  @@index([key, code])
  @@map("dictionary")
}

enum RepeatType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
